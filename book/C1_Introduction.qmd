:::: progress
:::: {.progress-bar style="width: 100%"}
::::
::::

# Introdução ao Controle Estatístico de Qualidade

A busca pela qualidade acompanha a história da produção de bens e serviços. Desde os primeiros artesãos, que inspecionavam manualmente suas peças, até os sistemas modernos de manufatura avançada e serviços digitais, sempre houve a necessidade de garantir que o produto final atendesse a requisitos previamente definidos. No entanto, foi apenas no início do século XX que a **Estatística** passou a desempenhar um papel central nesse processo.

O **Controle Estatístico de Qualidade (CEQ)** surge como uma metodologia estruturada para compreender, monitorar e melhorar processos por meio de técnicas estatísticas. Seu objetivo central é distinguir a **variabilidade natural** — inerente a qualquer processo — das **causas especiais de variação**, que sinalizam problemas ou mudanças não planejadas. Essa distinção, introduzida por **Walter A. Shewhart**, é a base conceitual dos gráficos de controle, uma das ferramentas mais utilizadas até hoje.

A aplicação do CEQ vão além da simples detecção de falhas. Ao proporcionar uma visão clara sobre a estabilidade de um processo, ele permite:

* **Reduzir desperdícios e custos**, ao identificar rapidamente fontes de defeitos;
* **Aumentar a confiabilidade** de produtos e serviços;
* **Tomar decisões baseadas em evidências**, em vez de percepções subjetivas;
* **Promover a melhoria contínua**, princípio central da gestão da qualidade moderna.

Ao longo das décadas, o CEQ expandiu sua influência. Inicialmente aplicado em linhas de produção industriais, hoje é utilizado em áreas tão diversas quanto **saúde pública**, **administração de serviços**, **engenharia de software** e **educação**. Essa diversidade de aplicações reflete o caráter universal das ferramentas estatísticas: qualquer processo que gere dados pode ser analisado sob a ótica do controle estatístico.

Neste projeto, exploraremos tanto os fundamentos matemáticos e estatísticos do CEQ quanto suas aplicações práticas em softwares livres. O uso de **R** e **Python** será fundamental para ilustrar, passo a passo, como implementar as técnicas e interpretar seus resultados. Assim, o leitor poderá não apenas compreender a teoria, mas também praticá-la em contextos reais, desenvolvendo autonomia para aplicar o CEQ em sua área de atuação.

## Relação entre Gráficos de Controle e Testes de Hipóteses

A análise do desempenho de um gráfico de controle está intimamente ligada aos princípios do teste de hipóteses, funcionando como uma ferramenta estatística que realiza uma sequência de testes para monitorar a estabilidade de um processo. Para fins de exemplo, considere que se esteja interessado na média de uma determinada caractéristica de uma variável.

Essencialmente, a hipótese nula ($H_0$) postula que o processo está sob controle, com sua média $\mu$ igual a um valor alvo $\mu_0$. A estrutura do gráfico reflete diretamente a lógica de um teste: a região entre os Limites de Controle (LIC e LSC) corresponde à área de não rejeição de $H_0$, enquanto qualquer ponto fora desses limites cai na região de rejeição. Assim, quando um ponto amostral se posiciona dentro dos limites, não há evidências para afirmar que o processo saiu do controle.

Ao utilizar essa abordagem, estamos sujeitos a dois tipos de erros estatísticos:

* **Erro Tipo I ($\alpha$):** Ocorre quando concluímos que o processo está fora de controle, mas na verdade ele continua estável. É o equivalente a um "alarme falso".
* **Erro Tipo II ($\beta$):** Acontece quando concluímos que o processo está sob controle, quando na verdade ele sofreu uma alteração. Este erro é frequentemente mais custoso para a empresa, pois uma falha real no processo não é detectada.

A habilidade do gráfico em detectar mudanças (como um deslocamento na média para $\mu = \mu_0 + \delta$) é avaliada pela **Curva Característica de Operação (CO)**, que calcula a probabilidade do Erro Tipo II ($\beta$) para diferentes magnitudes de mudança ($\delta$) e tamanhos de amostra ($n$), mantendo um $\alpha$ fixo.

Apesar das semelhanças, existem diferenças importantes na aplicação de Testes de Hipóteses (TH) e Gráficos de Controle (GC):

* **TH:** Geralmente, verifica a validade de uma suposição sobre um parâmetro populacional em um único ponto no tempo (ex: a média da população é igual a $\mu_0$ ?).
* **GC:** Seu objetivo principal é monitorar e verificar a estabilidade do processo de forma contínua ao longo do tempo.

As causas que levam um processo a sair do controle podem se manifestar de várias formas, mas nem todas se alinham perfeitamente ao modelo de um teste de hipóteses clássico. Por exemplo, uma causa atribuível pode resultar em:

1.  Uma mudança permanente na média para um novo valor.
2.  Uma mudança temporária, com a média retornando ao estado de controle.
3.  Um deslocamento constante ou uma tendência de subida/descida na média.

É importante notar que apenas o primeiro cenário (uma mudança para um novo patamar fixo) corresponde diretamente ao modelo usual de teste de hipóteses que se aprende na estatística básica.

## Sobre os Softwares Usados


### Linguagem de Programação R

O R é um tipo de linguagem e um software computacional e gráfico de código aberto, livre e gratuito do tipo GNU (*General Public License*), permitindo aos usuários sua redistribuição de forma livre e atualização para melhorias, estendendo seu poder computacional. 

Disseminado como um programa estatístico, é retroalimentado pela própria comunidade de usuários pela criação de funções específicas e o agrupamento delas em pacotes. Dentre suas habilidades, podem ser citadas análises estatísticas, modelagem, estatística espacial, tratamento de dados em bioinformática, entre outras aplicações [@Ritter2019; @Lopes2021].

Focando na visualização gráfica, um dos pacotes mais elegantes em termos de funcionalidade é o **ggplot2**, que funciona a partir do fornecimento do conjunto de dados e do mapeamento estético, com adição progressiva de camadas, escala de cores e sistemas de coordenadas [@ggplot2]. 


### Linguagem de Programação Python

Python é uma linguagem de alto nível com programação orientada a objetos, sendo considerada de fácil aprendizado com estrutura poderosa e eficiente. As características de sua natureza interpretativa, o tornam uma linguagem ideal para fazer *scripts* e desenvolvimento de aplicações rápidas em diversas áreas e na maioria das plataformas [@PythonDocs2025; @SciPython2025].

A ampla biblioteca do Python incluem diversos métodos numéricos, ferramentas gráficas e processamento de dados, tendo vasta utilização na computação científica e ciência de dados. Entre elas, se destacam **NumPy**, **SciPy** e **Matplotlib**, fundamentais no uso da linguagem. Fazendo um breve resumo sobre cada uma: 

* **NumPy:** voltada para computação numérica, oferece suporte para *arrays* multidimensionais e funções matemáticas de alto desempenho [@harris2020array]. É a base para muitas outras bibliotecas científicas em Python.

* **SciPy:** construída a partir do *NumPy*, fornece ferramentas avançadas para cálculos científicos, como álgebra linear, otimização, integração, estatística e processamento de sinais [@SciPython2025].

* **Matplotlib**: focada na parte gráfica e visualização de dados, permite a construção de grafos personalizados em duas e três dimensões, incluindo gráficos a partir de dados em grade, dados volumétricos, de distribuição estatística e comparações pareadas [@Hunter:2007].


:::: progress
:::: {.progress-bar style="width: 100%"}
::::
::::
